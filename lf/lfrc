##########################################################
#SETTER
  set ignorecase
  set icons
  set info size
  # set shell zsh
  # set shellopts '-euy'
  # set ifs "\n"
  # set filesep "\n" 
  # set reverse
  # set drawbox
  # set relativenumber
  # set hidden 
  # set dircounts
  #image previewer
  #alias lf= 'sh ~/.config/lf/extensions/ueberzug/ueberzug.sh'
  set previewer ~/.config/lf/extensions/ueberzug/preview
  set cleaner ~/.config/lf/extensions/ueberzug/cleaner
#SETTER END
##########################################################


##########################################################
#COMMAND START

# open the lfrc, and reload it after saving
  cmd edit_config :{{
    $$EDITOR ~/.config/lf/lfrc
    source ~/.config/lf/lfrc
  }}

#####################
#open files via nvim
  # cmd open ${{
  #     test -L $f && f=$(readlink -f $f)
  #     case $(file --mime-type $f -b) in
  #         text/*) nvim $fx;;
  #         text/md) glow -p $fx;;
  #         *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
  #     esac
  # }}

  cmd open ${{
      test -L $f && f=$(readlink -f $f)
      case $f in
          *.md) glow -p $fx;;  # handle markdown files via glow
          *)
              case $(file --mime-type $f -b) in
                  text/*) nvim $fx;;   # handle text files via neovim
                  text/plain) nvim $fx;;   # handle text plain files via neovim
                  application/json) nvim $fx;;   # handle json files via neovim
                  application/javascript) nvim $fx;;   # handle javascripts files via neovim
                  application/x-7z-compressed) file-roller $fx;;   # handle javascripts files via neovim
                  *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
              esac
              ;;
      esac
  }}

#####################
#open files via gui or cli
  cmd open-with-gui &$@ $fx ## opens with a gui application outside lf client
  cmd open-with-cli $$@ $fx ## opens with a cli application inside lf client

#####################
#preview a file
  # cmd file_preview $LESSOPEN='| ~/.config/lf/etc/preview %s' LESS='-cRiX' less $f
  cmd file_preview $LESSOPEN='| ~/.config/lf/etc/preview %s' LESS='-cRiX' cls; bat --wrap auto --paging always $f

#####################
#searchable bookmarks
# cmd bookmark_jump ${{
#     res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
#     lf -remote "send $id cd \"$res\""
# }}

# cmd bookmark_create ${{
#     read ans 
#     echo $PWD > $LF_BOOKMARK_PATH/$ans
# }}

#toggle preview
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

#####################
#change title on cd
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    # printf "\033]0; $PWD\007" > /dev/tty
    list="$(tail -n 20 /tmp/lf_dir_history | sed "\|^$PWD$|d")"
    echo "$list"$'\n'"$PWD" > /tmp/lf_dir_history
    printf "\033]0; $(pwd | sed "s|$HOME|~|")\007" > /dev/tty
}}
# also run at startup
on-cd

# cmd on-cd &{{
# 	list="$(tail -n 20 /tmp/lf_dir_history | sed "\|^$PWD$|d")"
# 	echo "$list"$'\n'"$PWD" > /tmp/lf_dir_history
# }}


# exa can be used to provide the file information shown in the bottom left corner:
# set statfmt ''
cmd on-select %{{
    exa -ld --color=always "$f"
}}
# not working
# cmd on-select &{{
#     lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
# }}

#####################
#create a new file
  cmd touch ${{
    printf "File Name: "
    read ans
    # $EDITOR $ans #enable to edit file
    touch "$ans"
  }}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

#####################
#extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
  cmd ex ${{
      set -f
      case $f in
          *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
          *.tar.gz|*.tgz) tar xzvf $f;;
          *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

#####################
#compress current file or selected files with tar and gunzip
  cmd tar ${{
    date=$(date +%Y-%m-%d_%H_%M)
    tar -zcvf "${1}.$date.tar.gz" $1
  }}

#####################
#compress current file or selected files with zip
  cmd zip ${{
      set -f
      # mkdir $1
      # cp -r $fx $1
      date=$(date +%Y-%m-%d_%H_%M)
      zip -r "${1}.$date.zip" $1
      # zip -r $1.zip $1
      # rm -rf $1
  }}

#####################
#backup selection with date
  cmd bak ${{
    date=$(date +%Y-%m-%d_%H_%M)
    tar -zcvf "${1}.$date.tar.gz" $1
  }}

#####################
#archive bindings
  cmd unarchive ${{
    case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}


#####################
# Dynamically set number of columns
${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}
cmd recol %{{
    if [ $lf_width -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $lf_width -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

#####################
cmd set_wallpaper ${{
  nitrogen --set-zoom-fill "$f"
  # wal -q -i "$f"
}}

#####################
#fuzzy finder
  cmd fzf_jump ${{
      # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
      res="$(fd -d 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
      if [ -d "$res" ] ; then
          cmd="cd"
      elif [ -f "$res" ] ; then
          cmd="select"
      else
          exit 0
      fi
      lf -remote "send $id $cmd \"$res\""
  }}

#fuzzy finder max depth
  cmd fzf_jump_max ${{
      # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
      res="$(fd | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
      if [ -d "$res" ] ; then
          cmd="cd"
      elif [ -f "$res" ] ; then
          cmd="select"
      else
          exit 0
      fi
      lf -remote "send $id $cmd \"$res\""
  }}


  cmd fzf_jump_history ${{
    res="$(cat /tmp/lf_dir_history | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
      cmd="cd"
    elif [ -f "$res" ] ; then
      cmd="select"
    else
      exit 0
    fi

    lf -remote "send $id $cmd \"$res\""
  }}

  cmd fzf_search ${{
      res="$( \
          RG_PREFIX="rg --column --line-number --no-heading --color=always \
              --smart-case "
          FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
  }}

#####################
#ZOXIDE
  cmd z %{{
      result="$(zoxide query --exclude "${PWD}" -- "$@")"
      lf -remote "send ${id} cd '${result}'"
  }}

  cmd zi ${{
      result="$(zoxide query -i -- "$@")"
      lf -remote "send ${id} cd '${result}'"
  }}

#####################
#LAZYGIT
  cmd lazygit ${{
      lazygit 
  }}
  map <a-g> :lazygit

#####################
#GIT
  cmd git_branch ${{
      git branch | fzf | xargs git checkout
      pwd_shell=$(pwd)
      lf -remote "send $id updir"
      lf -remote "send $id cd \"$pwd_shell\""
  }}
#####################
#YANK TO CLIPBOARD
cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}
cmd copy_to_clipboard %{{
    if type pbcopy > /dev/null 2>&1; then
    printf '%s' "$f" | pbcopy
    elif type xsel > /dev/null 2>&1; then
    printf '%s' "$f" | xsel -ib
    fi
}}

#####################

# show progress for file copying (copy-on-write)
# https://github.com/gokcehan/lf/wiki/Tips#show-progress-for-file-copying
 cmd paste_try_cow &{{
     # # This was very helpful for debugging:
     # log_file="$HOME/lf-reflink-log-$(date +'%Y-%m-%d_%H-%M-%S')"
     # [ -f "$log_file" ] || touch "$log_file"
     # exec 1>> $log_file 2>&1
     # set -x

     # In theory, this may fail,
     # but I tested it on selection with 10k files - everything worked (bash)
     set -- $(cat ~/.local/share/lf/files)
     mode="$1"
     shift

     if [ $mode = 'copy' ]; then
         # Reflink if all items of selection and the destination are on the
         # same mount point and it is CoW fs.
         # (to make sure reflink never fails in first place, so we don't have to
         # clean up)

         src_targets="$(df --output=target -- "$@" | sed '1d' | sort -u)"

         if [ "$(df --output=target -- "$PWD" | tail -n 1)" = \
              "$(echo "$src_targets" | tail -n 1)" ] && \
              (( "$(echo "$src_targets" | wc -l)" == 1 )) && \
              [[ "$(df --output=fstype -- "$PWD" | tail -n 1)" =~ ^(btrfs|xfs|zfs)$ ]]; then

             echo 'selected copy and cp reflink paste'

             start=$(date '+%s')

             # Handle same names in dst
             # TODO parallelism, idk - but exit/return/break won't stop the loop from subshell...
             for i in "$@"; do
                 name="${i##*/}"
                 original="$name"

                 count=0
                 while [ -w "$PWD/$name" ]; do
                     count=$((count+1))
                     name="$original.~$count~"
                 done

                 set +e
                 cp_out="$(cp -rn --reflink=always -- "$i" "$PWD/$name" 2>&1)"
                 set -e

                 if [ ! -z "$cp_out" ]; then
                     lf -remote "send $id echoerr $cp_out"
                     exit 0
                 fi
             done

             finish=$(( $(date '+%s') - $start ))
             t=''
             if (( $finish > 2 )); then
                 t="${finish}s"
             fi

             # Or just skip a file when names are the same.
             # (A LOT faster if you e.g. pasting selection of 10k files)
             # cp -rn --reflink=always -- "$@" .

             lf -remote "send clear"

             green=$'\u001b[32m'
             reset=$'\u001b[0m'
             lf -remote "send $id echo ${green}reflinked!${reset} $t"
         else
             echo 'selected copy and lf native paste'
             lf -remote "send $id paste"
             lf -remote "send clear"
         fi

     elif [ $mode = 'move' ]; then
         echo 'selected move and lf native paste'
         lf -remote "send $id paste"
         lf -remote "send clear"
     fi

     # # for debug
     # set +x

     lf -remote "send load"
 }}

#COMMAND END
##########################################################


##########################################################
#FOLDER BOOKMARKS START
  map gL cd ~/Nextcloud/LINUX
  map gM cd ~/Nextcloud/MEDIA
  map gm cd /run/media/eddie/
  map gN cd ~/Nextcloud
  map gO cd ~/Nextcloud/MEDIA/OBSIDIAN/
  map gW cd ~/Nextcloud/MEDIA/PICTURES/WALLPAPER
  map gc cd ~/.config
  map gd cd ~/gitREPO/dotfiles_linux
  map ge cd /etc
  map gh cd ~/
  map gl cd ~/.local
  map gn cd ~/gitREPO/dotfiles_linux/nvim
  map gi cd ~/gitREPO/dotfiles_linux/i3
  map go cd ~/opt
  map gp cd ~/gitREPO/dotfiles_private/
  map gr cd /
  map gR cd ~/opt/RESTORE
  map gs cd ~/scripts
  map gt cd ~/Nextcloud/MEDIA/OBSIDIAN/techeddie
  map gu cd /usr/
  map gw cd ~/Nextcloud/MEDIA/PICTURES/WALLPAPER
#FOLDER BOOKMARKS END
##########################################################

#####################################################################
#MAPPINGS
  # map - z
  # map <a-l> push :z<space>
  # map <c-b> :bookmark_create
  # map <c-f> :fzf_search
  # map <esc> quit
  # map <space> :toggle
  # map <tab> bookmark_jump
  # map J push :z<space>
  # map P file_preview
  # map a touch # a = add
  # map b mark-load
  # map c touch # c = create
  # map f search - replaced with fzf
  # map g? $lf -doc | $PAGER; clear
  # map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}
  # map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
  # map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
  # map p paste
  # map dd delete

  cmap <backtab> cmd-menu-complete-back
  cmap <down> cmd-history-next
  cmap <tab> cmd-menu-complete
  cmap <up> cmd-history-prev
  map - z
  map . set hidden!
  map <Esc> quit
  map <a-0> recol  
  map <a-b> :git_branch
  map <a-e> :!thunar .
  map <a-f> :fzf_jump
  map <a-m> $vimv $fx   #renaming VI like
  map <a-p> :file_preview 
  map <a-r> :edit_config
  map <a-t> :tag-toggle
  map <a-v> toggle_preview
  map <backspace2> updir
  map <backspace> :fzf_jump_history
  map <c-c> :copy_to_clipboard
  map <c-f> :fzf_search
  map <c-h> :fzf_jump_history
  map <c-k> quit
  map <c-l> :fzf_jump_history
  map <c-q> quit
  map <c-r> :source ~/.config/lf/lfrc
  map <c-w> :set_wallpaper
  map <enter> open
  map <f-2> rename #rename current selection
  map <f-5> push :source<space>~/gitREPO/dotfiles_linux/lf/lfrc<enter>
  map <f-6> unarchive
  map <f-7> push %mkdir<space>
  map <space> :toggle 
  map <tab> :fzf_jump_history
  map = filter
  map E &thunar
  map F :fzf_jump_max
  map I push :zi<space>
  map J :updir; down; open
  map K :updir; up; open
  map L :link
  map O push :open-with-gui<space>
  map P toggle_preview
  map R push :source<space>~/gitREPO/dotfiles_linux/lf/lfrc<enter>
  map R reload
  map S :!zsh
  map V toggle_preview
  map Z push :zi<space>
  map ad push %mkdir<space>
  map ae execute
  map af push %touch<space>
  map au unarchive
  map b :fzf_jump_history
  map b mark-load
  map c
  map cd push %mkdir<space>
  map cf push %touch<space>
  map d
  map dd $rm -fr "$fx"
  map e $$EDITOR "$f"
  map f :fzf_jump
  map g? $lf -doc | bat; clear
  map i %du -sh $f
  map o push :open-with-cli<space>
  map p paste_try_cow
  map t :!zsh
  map v :invert
  map x cut
  map y copy
